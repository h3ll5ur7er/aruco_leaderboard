/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test GetAllCarsEndpoint
        /// </summary>
        [Test]
        public void GetAllCarsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllCarsEndpoint(xFields);
            //Assert.IsInstanceOf<Cars> (response, "response is Cars");
        }
        
        /// <summary>
        /// Test GetAllCategoriesEndpoint
        /// </summary>
        [Test]
        public void GetAllCategoriesEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllCategoriesEndpoint(xFields);
            //Assert.IsInstanceOf<Categories> (response, "response is Categories");
        }
        
        /// <summary>
        /// Test GetAllDriversEndpoint
        /// </summary>
        [Test]
        public void GetAllDriversEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllDriversEndpoint(xFields);
            //Assert.IsInstanceOf<Drivers> (response, "response is Drivers");
        }
        
        /// <summary>
        /// Test GetAllEventsEndpoint
        /// </summary>
        [Test]
        public void GetAllEventsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllEventsEndpoint(xFields);
            //Assert.IsInstanceOf<Events> (response, "response is Events");
        }
        
        /// <summary>
        /// Test GetAllLapEndpoint
        /// </summary>
        [Test]
        public void GetAllLapEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllLapEndpoint(xFields);
            //Assert.IsInstanceOf<Laps> (response, "response is Laps");
        }
        
        /// <summary>
        /// Test GetAllRacesEndpoint
        /// </summary>
        [Test]
        public void GetAllRacesEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllRacesEndpoint(xFields);
            //Assert.IsInstanceOf<Races> (response, "response is Races");
        }
        
        /// <summary>
        /// Test GetAllResultsEndpoint
        /// </summary>
        [Test]
        public void GetAllResultsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllResultsEndpoint(xFields);
            //Assert.IsInstanceOf<Results> (response, "response is Results");
        }
        
        /// <summary>
        /// Test GetAllTeamsEndpoint
        /// </summary>
        [Test]
        public void GetAllTeamsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xFields = null;
            //var response = instance.GetAllTeamsEndpoint(xFields);
            //Assert.IsInstanceOf<Teams> (response, "response is Teams");
        }
        
        /// <summary>
        /// Test GetMarkerGeneratorEndpoint
        /// </summary>
        [Test]
        public void GetMarkerGeneratorEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? markerId = null;
            //instance.GetMarkerGeneratorEndpoint(markerId);
            
        }
        
        /// <summary>
        /// Test GetOneCarEndpoint
        /// </summary>
        [Test]
        public void GetOneCarEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneCarEndpoint(id, xFields);
            //Assert.IsInstanceOf<Car> (response, "response is Car");
        }
        
        /// <summary>
        /// Test GetOneCategoryEndpoint
        /// </summary>
        [Test]
        public void GetOneCategoryEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneCategoryEndpoint(id, xFields);
            //Assert.IsInstanceOf<Category> (response, "response is Category");
        }
        
        /// <summary>
        /// Test GetOneDriverEndpoint
        /// </summary>
        [Test]
        public void GetOneDriverEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneDriverEndpoint(id, xFields);
            //Assert.IsInstanceOf<Driver> (response, "response is Driver");
        }
        
        /// <summary>
        /// Test GetOneEventEndpoint
        /// </summary>
        [Test]
        public void GetOneEventEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneEventEndpoint(id, xFields);
            //Assert.IsInstanceOf<Event> (response, "response is Event");
        }
        
        /// <summary>
        /// Test GetOneLapEndpoint
        /// </summary>
        [Test]
        public void GetOneLapEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneLapEndpoint(id, xFields);
            //Assert.IsInstanceOf<Lap> (response, "response is Lap");
        }
        
        /// <summary>
        /// Test GetOneRaceEndpoint
        /// </summary>
        [Test]
        public void GetOneRaceEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneRaceEndpoint(id, xFields);
            //Assert.IsInstanceOf<Race> (response, "response is Race");
        }
        
        /// <summary>
        /// Test GetOneResultEndpoint
        /// </summary>
        [Test]
        public void GetOneResultEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneResultEndpoint(id, xFields);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
        /// <summary>
        /// Test GetOneTeamsEndpoint
        /// </summary>
        [Test]
        public void GetOneTeamsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string xFields = null;
            //var response = instance.GetOneTeamsEndpoint(id, xFields);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test PostAllCarsEndpoint
        /// </summary>
        [Test]
        public void PostAllCarsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Car payload = null;
            //string xFields = null;
            //var response = instance.PostAllCarsEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Car> (response, "response is Car");
        }
        
        /// <summary>
        /// Test PostAllCategoriesEndpoint
        /// </summary>
        [Test]
        public void PostAllCategoriesEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Category payload = null;
            //string xFields = null;
            //var response = instance.PostAllCategoriesEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Category> (response, "response is Category");
        }
        
        /// <summary>
        /// Test PostAllDriversEndpoint
        /// </summary>
        [Test]
        public void PostAllDriversEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Driver payload = null;
            //string xFields = null;
            //var response = instance.PostAllDriversEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Driver> (response, "response is Driver");
        }
        
        /// <summary>
        /// Test PostAllEventsEndpoint
        /// </summary>
        [Test]
        public void PostAllEventsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Event payload = null;
            //string xFields = null;
            //var response = instance.PostAllEventsEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Event> (response, "response is Event");
        }
        
        /// <summary>
        /// Test PostAllLapEndpoint
        /// </summary>
        [Test]
        public void PostAllLapEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Lap payload = null;
            //string xFields = null;
            //var response = instance.PostAllLapEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Lap> (response, "response is Lap");
        }
        
        /// <summary>
        /// Test PostAllRacesEndpoint
        /// </summary>
        [Test]
        public void PostAllRacesEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Race payload = null;
            //string xFields = null;
            //var response = instance.PostAllRacesEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Race> (response, "response is Race");
        }
        
        /// <summary>
        /// Test PostAllResultsEndpoint
        /// </summary>
        [Test]
        public void PostAllResultsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Result payload = null;
            //string xFields = null;
            //var response = instance.PostAllResultsEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
        /// <summary>
        /// Test PostAllTeamsEndpoint
        /// </summary>
        [Test]
        public void PostAllTeamsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Team payload = null;
            //string xFields = null;
            //var response = instance.PostAllTeamsEndpoint(payload, xFields);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test PostMarkerDetectorEndpoint
        /// </summary>
        [Test]
        public void PostMarkerDetectorEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string xFields = null;
            //var response = instance.PostMarkerDetectorEndpoint(file, xFields);
            //Assert.IsInstanceOf<Markers> (response, "response is Markers");
        }
        
        /// <summary>
        /// Test PostOneCarEndpoint
        /// </summary>
        [Test]
        public void PostOneCarEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Car payload = null;
            //string xFields = null;
            //var response = instance.PostOneCarEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Car> (response, "response is Car");
        }
        
        /// <summary>
        /// Test PostOneCategoryEndpoint
        /// </summary>
        [Test]
        public void PostOneCategoryEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Category payload = null;
            //string xFields = null;
            //var response = instance.PostOneCategoryEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Category> (response, "response is Category");
        }
        
        /// <summary>
        /// Test PostOneDriverEndpoint
        /// </summary>
        [Test]
        public void PostOneDriverEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Driver payload = null;
            //string xFields = null;
            //var response = instance.PostOneDriverEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Driver> (response, "response is Driver");
        }
        
        /// <summary>
        /// Test PostOneEventEndpoint
        /// </summary>
        [Test]
        public void PostOneEventEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Event payload = null;
            //string xFields = null;
            //var response = instance.PostOneEventEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Event> (response, "response is Event");
        }
        
        /// <summary>
        /// Test PostOneLapEndpoint
        /// </summary>
        [Test]
        public void PostOneLapEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Lap payload = null;
            //string xFields = null;
            //var response = instance.PostOneLapEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Lap> (response, "response is Lap");
        }
        
        /// <summary>
        /// Test PostOneRaceEndpoint
        /// </summary>
        [Test]
        public void PostOneRaceEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Race payload = null;
            //string xFields = null;
            //var response = instance.PostOneRaceEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Race> (response, "response is Race");
        }
        
        /// <summary>
        /// Test PostOneResultEndpoint
        /// </summary>
        [Test]
        public void PostOneResultEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Result payload = null;
            //string xFields = null;
            //var response = instance.PostOneResultEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
        /// <summary>
        /// Test PostOneTeamsEndpoint
        /// </summary>
        [Test]
        public void PostOneTeamsEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //Team payload = null;
            //string xFields = null;
            //var response = instance.PostOneTeamsEndpoint(id, payload, xFields);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
    }

}
